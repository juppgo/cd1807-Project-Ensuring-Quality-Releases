name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myLinuxVM-pool

variables:
  python.version: '3.8.10'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: '5334d500-6ba7-492d-ba68-c38bc4fe0639'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate107859705'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    # Run Terraform Apply
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'


    
    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
        replaceExistingArchive: true
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Selenium UI Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        replaceExistingArchive: true
   # FakeRestAPI - Publish
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      displayName: 'Upload fakerrestapi Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
        replaceExistingArchive: true
        verbose: true
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Performance Tests Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: DeployApplicationAndRunTests
    pool: myLinuxVM-pool     
    environment: linux-test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: myApplication20240328-AppService
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip 

          #--------------------------------------------#    
          # Postman - Install Newman    
          - task: NodeTool@0
            displayName: Install Node 16.0 and Newman
            inputs:
              versionSpec: '16.x'
          - bash: |
                npm install -g newman
                mkdir -p log/newman
              #workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          # Postman Data Validation Test Suite    
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              script: 'newman run Validation_Test.postman_collection.json -e Environment.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          # Postman Regression Test Suite    
          - task: CmdLine@2
            displayName: Run Regression Tests
            continueOnError: true
            inputs:
              script: 'newman run Regression_Test.postman_collection.json -e Environment.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          # Postman - Publish Results 
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: 'automatedtesting/postman'
              mergeTestResults: true
              testRunTitle: 'Publish test results'              

        #--------------------------------------------#
        # Jmeter - Performance Test Suite
          - task: JMeterInstaller@0
            displayName: 'Install JMeter 5.6'
            inputs:
              jmeterVersion: '5.6'          
          - task: Bash@3
            displayName: Perform JMeter Stress Test
            inputs:
              targetType: 'inline'
              script: |
                # Navigate to the JMeter directory
                #cd $(Agent.ToolsDirectory)/apache-jmeter-5.6/bin
                
                # Execute the stress test
                $(Agent.ToolsDirectory)/jmeter-b78fe7bc0106f2518c30e8a491073b2c33bc8b3afeca19834f6642e7/5.6.0/x64/apache-jmeter-5.6/bin/jmeter -n -t $(Build.SourcesDirectory)/automatedtesting/jmeter/Stress_Test.jmx \
                -l $(Build.SourcesDirectory)/log/jmeter/stress-test-result.csv \
                -e -f -o $(Build.SourcesDirectory)/log/jmeter/stress-test-html-report \
                -j $(Build.SourcesDirectory)/log/jmeter/jmeter-stress-test.log
                
          - task: Bash@3
            displayName: Perform JMeter Endurance Test
            inputs:
              targetType: 'inline'
              script: |
                # Navigate to the JMeter directory
                #cd $(Agent.ToolsDirectory)/apache-jmeter-5.6/bin
                
                # Execute the endurance test
                $(Agent.ToolsDirectory)/jmeter-b78fe7bc0106f2518c30e8a491073b2c33bc8b3afeca19834f6642e7/5.6.0/x64/apache-jmeter-5.6/bin/jmeter -n -t $(Build.SourcesDirectory)/automatedtesting/jmeter/Endurance_Test.jmx \
                -l $(Build.SourcesDirectory)/log/jmeter/endurance_test_result.csv \
                -e -f -o $(Build.SourcesDirectory)/log/jmeter/endurance_test_html_report \
                -j $(Build.SourcesDirectory)/log/jmeter/jmeter_endurance_test.log

          - task: ArchiveFiles@2
            displayName: Save JMeter Stress Test Report to Artifact
            inputs:
                rootFolderOrFile: "$(System.DefaultWorkingDirectory)/log/jmeter/stress_test_html_report"
                includeRootFolder: false
                archiveType: "zip"
                archiveFile: "$(System.DefaultWorkingDirectory)/log/jmeter/stress_test_html_report_$(Build.BuildId).zip"
                verbose: true
          - task: ArchiveFiles@2
            displayName: Save JMeter Endurance Test Report to Artifact
            inputs:
                rootFolderOrFile: "$(System.DefaultWorkingDirectory)/log/jmeter/endurance_test_html_report"
                includeRootFolder: false
                archiveType: "zip"
                archiveFile: "$(System.DefaultWorkingDirectory)/log/jmeter/endurance_test_html_report_$(Build.BuildId).zip"
                verbose: true
          - task: PublishPipelineArtifact@1
            displayName: Publish JMeter Logs
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/log/jmeter"
              artifactName: "drop-jmeter-logs"

#--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: linux-test
      resourceType: VirtualMachine

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                
                sudo apt-get update && apt-get upgrade -y
                sudo apt-get install python3-pip unzip chromium-browser -y
                sudo apt-get install -y sudo apt-get install fonts-liberation libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcairo2 libcups2 libgbm1 libgtk-3-0 libpango-1.0-0 libu2f-udev libvulkan1 libxcomposite1 libxdamage1 libxfixes3 libxkbcommon0 libxrandr2 xdg-utils
                sudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo apt --fix-broken install
                sudo dpkg -i google-chrome-stable_current_amd64.deb
                pip3 install selenium
                pip3 install --upgrade selenium
                pip3 install --upgrade requests
                cd ~/
                DIR=/home/devopsagent/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv $(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/devopsagent/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget 	https://storage.googleapis.com/chrome-for-testing-public/123.0.6312.86/linux64/chromedriver-linux64.zip
                    unzip -o chromedriver-linux64.zip
                    sudo ln -s $PWD/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/devopsagent/app
                echo "Starting Selenium Tests"
                python3 selenium_test.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."